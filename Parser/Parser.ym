
%{

#include <iostream>
#include <cstdio>

#include "ParserConsumer.h"

#include "parser.hpp"
#include "lexer.hpp"

int yylex();
void yyerror(id <ParserConsumer> consumer, const char *msg);

%}

%output  "Parser/Generated Code/parser.mm"
%defines "Parser/Generated Code/parser.hpp"

  //%define api.pure full
%define parse.error verbose

%parse-param { id <ParserConsumer> consumer }

%union {
    char *stringValue;
    int numericValue;
}

%token <stringValue> Token_String
%token <numericValue> Token_Number

%%

/* http://www.tldp.org/HOWTO/Lex-YACC-HOWTO-6.html 6.2 Recursion: 'right is wrong' */
tokens: /* empty */
      | tokens token

token:
    Token_String {

        std::cout << "Parser says: Hello from C++\n";

        printf("[Parser, string] %s\n", $1);

        [consumer parserDidParseString:$1];

        free($1);
    }
    | Token_Number {
        printf("[Parser, number]\n");

        [consumer parserDidParseNumber:$1];
    }
%%
